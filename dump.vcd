$date
	Wed Oct 21 00:52:47 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module _tetris $end
$var wire 32 # bus_step_1 [31:0] $end
$var wire 32 $ bus_step_2 [31:0] $end
$var wire 1 % clk $end
$var wire 32 & coord_x_step_1 [31:0] $end
$var wire 32 ' coord_x_step_2 [31:0] $end
$var wire 32 ( coord_y_step_1 [31:0] $end
$var wire 32 ) coord_y_step_2 [31:0] $end
$var wire 16 * instr_step_1 [15:0] $end
$var wire 16 + instr_step_2 [15:0] $end
$var wire 1 , is_load_PC $end
$var wire 1 - is_load_for_launch_1_2 $end
$var wire 1 . is_load_for_launch_2_3 $end
$var wire 1 / is_move $end
$var wire 1 0 is_touch $end
$var wire 1 1 is_write_mem $end
$var wire 1 2 is_write_reg $end
$var wire 32 3 new_bus_step_2 [31:0] $end
$var wire 32 4 new_bus_step_3 [31:0] $end
$var wire 32 5 new_coord_x_step_2 [31:0] $end
$var wire 32 6 new_coord_x_step_3 [31:0] $end
$var wire 32 7 new_coord_y_step_2 [31:0] $end
$var wire 32 8 new_coord_y_step_3 [31:0] $end
$var wire 1 9 rst $end
$scope module _cpu_step_1 $end
$var wire 32 : bus_step_1 [31:0] $end
$var wire 1 % clk $end
$var wire 32 ; coord_x_step_1 [31:0] $end
$var wire 32 < coord_y_step_1 [31:0] $end
$var wire 8 = instr_addr [7:0] $end
$var wire 16 > instr_step_1 [15:0] $end
$var wire 1 , is_load_PC $end
$var wire 1 ? is_touch $end
$var wire 1 2 is_write_reg $end
$var wire 32 @ new_bus_step_3 [31:0] $end
$var wire 32 A new_coord_x_step_3 [31:0] $end
$var wire 32 B new_coord_y_step_3 [31:0] $end
$var wire 8 C new_instr_addr [7:0] $end
$var wire 1 9 rst $end
$scope module _adder_plus_one $end
$var wire 1 % clk $end
$var wire 8 D out [7:0] $end
$var wire 1 9 rst $end
$var wire 8 E x [7:0] $end
$var wire 8 F y [7:0] $end
$upscope $end
$scope module _PC $end
$var wire 1 % clk $end
$var wire 8 G in [7:0] $end
$var wire 1 , load $end
$var wire 1 9 rst $end
$var reg 8 H out [7:0] $end
$upscope $end
$scope module _inst $end
$var wire 8 I curr_command [7:0] $end
$var wire 16 J out_data [15:0] $end
$var wire 1 9 rst $end
$upscope $end
$scope module _border $end
$var wire 32 K bus_step_1 [31:0] $end
$var wire 1 % clk $end
$var wire 32 L coord_x_step_1 [31:0] $end
$var wire 32 M coord_y_step_1 [31:0] $end
$var wire 1 ? is_touch $end
$var wire 1 2 is_write_reg $end
$var wire 32 N new_bus_step_3 [31:0] $end
$var wire 32 O new_coord_x_step_3 [31:0] $end
$var wire 32 P new_coord_y_step_3 [31:0] $end
$var wire 1 9 rst $end
$scope begin assign_block_1[0] $end
$scope module _x_coord $end
$var wire 1 % clk $end
$var wire 8 Q in [7:0] $end
$var wire 1 2 load $end
$var wire 1 R rst $end
$var wire 8 S rst_value [7:0] $end
$var reg 8 T out [7:0] $end
$var reg 1 U without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_1[1] $end
$scope module _x_coord $end
$var wire 1 % clk $end
$var wire 8 V in [7:0] $end
$var wire 1 2 load $end
$var wire 1 W rst $end
$var wire 8 X rst_value [7:0] $end
$var reg 8 Y out [7:0] $end
$var reg 1 Z without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_1[2] $end
$scope module _x_coord $end
$var wire 1 % clk $end
$var wire 8 [ in [7:0] $end
$var wire 1 2 load $end
$var wire 1 \ rst $end
$var wire 8 ] rst_value [7:0] $end
$var reg 8 ^ out [7:0] $end
$var reg 1 _ without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_1[3] $end
$scope module _x_coord $end
$var wire 1 % clk $end
$var wire 8 ` in [7:0] $end
$var wire 1 2 load $end
$var wire 1 a rst $end
$var wire 8 b rst_value [7:0] $end
$var reg 8 c out [7:0] $end
$var reg 1 d without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_2[0] $end
$scope module _y_coord $end
$var wire 1 % clk $end
$var wire 8 e in [7:0] $end
$var wire 1 2 load $end
$var wire 1 f rst $end
$var wire 8 g rst_value [7:0] $end
$var reg 8 h out [7:0] $end
$var reg 1 i without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_2[1] $end
$scope module _y_coord $end
$var wire 1 % clk $end
$var wire 8 j in [7:0] $end
$var wire 1 2 load $end
$var wire 1 k rst $end
$var wire 8 l rst_value [7:0] $end
$var reg 8 m out [7:0] $end
$var reg 1 n without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_2[2] $end
$scope module _y_coord $end
$var wire 1 % clk $end
$var wire 8 o in [7:0] $end
$var wire 1 2 load $end
$var wire 1 p rst $end
$var wire 8 q rst_value [7:0] $end
$var reg 8 r out [7:0] $end
$var reg 1 s without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_2[3] $end
$scope module _y_coord $end
$var wire 1 % clk $end
$var wire 8 t in [7:0] $end
$var wire 1 2 load $end
$var wire 1 u rst $end
$var wire 8 v rst_value [7:0] $end
$var reg 8 w out [7:0] $end
$var reg 1 x without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_3[0] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 y in [7:0] $end
$var wire 1 2 load $end
$var wire 1 9 rst $end
$var wire 8 z rst_value [7:0] $end
$var reg 8 { out [7:0] $end
$var reg 1 | without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_3[1] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 } in [7:0] $end
$var wire 1 2 load $end
$var wire 1 9 rst $end
$var wire 8 ~ rst_value [7:0] $end
$var reg 8 !" out [7:0] $end
$var reg 1 "" without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_3[2] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 #" in [7:0] $end
$var wire 1 2 load $end
$var wire 1 9 rst $end
$var wire 8 $" rst_value [7:0] $end
$var reg 8 %" out [7:0] $end
$var reg 1 &" without_load $end
$upscope $end
$upscope $end
$scope begin assign_block_3[3] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 '" in [7:0] $end
$var wire 1 2 load $end
$var wire 1 9 rst $end
$var wire 8 (" rst_value [7:0] $end
$var reg 8 )" out [7:0] $end
$var reg 1 *" without_load $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module _instr_1_2_launch $end
$var wire 1 % clk $end
$var wire 16 +" in [15:0] $end
$var wire 1 - load $end
$var wire 1 9 rst $end
$var reg 16 ," out [15:0] $end
$upscope $end
$scope module _coord_x_1_2_launch $end
$var wire 1 % clk $end
$var wire 32 -" in [31:0] $end
$var wire 1 - load $end
$var wire 1 9 rst $end
$var reg 32 ." out [31:0] $end
$upscope $end
$scope module _coord_y_1_2_launch $end
$var wire 1 % clk $end
$var wire 32 /" in [31:0] $end
$var wire 1 - load $end
$var wire 1 9 rst $end
$var reg 32 0" out [31:0] $end
$upscope $end
$scope module _bus_1_2_launch $end
$var wire 1 % clk $end
$var wire 32 1" in [31:0] $end
$var wire 1 - load $end
$var wire 1 9 rst $end
$var reg 32 2" out [31:0] $end
$upscope $end
$scope module _cpu_step_2 $end
$var wire 32 3" bus_step_2 [31:0] $end
$var wire 1 % clk $end
$var wire 8 4" command [7:0] $end
$var wire 32 5" coord_x_step_2 [31:0] $end
$var wire 32 6" coord_y_step_2 [31:0] $end
$var wire 8 7" dir [7:0] $end
$var wire 16 8" instr_step_2 [15:0] $end
$var wire 1 / is_move $end
$var wire 1 0 is_touch $end
$var wire 32 9" new_bus_step_2 [31:0] $end
$var wire 32 :" new_coord_x_step_2 [31:0] $end
$var wire 32 ;" new_coord_y_step_2 [31:0] $end
$var wire 1 9 rst $end
$scope module _alu $end
$var wire 32 <" bus_step_2 [31:0] $end
$var wire 1 % clk $end
$var wire 8 =" command [7:0] $end
$var wire 32 >" coord_x_step_2 [31:0] $end
$var wire 32 ?" coord_y_step_2 [31:0] $end
$var wire 8 @" dir [7:0] $end
$var wire 1 / is_move $end
$var wire 1 0 is_touch $end
$var wire 1 9 rst $end
$var reg 32 A" new_bus_step_2 [31:0] $end
$var reg 32 B" new_coord_x_step_2 [31:0] $end
$var reg 32 C" new_coord_y_step_2 [31:0] $end
$upscope $end
$upscope $end
$scope module _new_coord_x_2_3_launch $end
$var wire 1 % clk $end
$var wire 32 D" in [31:0] $end
$var wire 1 . load $end
$var wire 1 9 rst $end
$var reg 32 E" out [31:0] $end
$upscope $end
$scope module _new_coord_y_2_3_launch $end
$var wire 1 % clk $end
$var wire 32 F" in [31:0] $end
$var wire 1 . load $end
$var wire 1 9 rst $end
$var reg 32 G" out [31:0] $end
$upscope $end
$scope module _new_regs_2_3_launch $end
$var wire 1 % clk $end
$var wire 32 H" in [31:0] $end
$var wire 1 . load $end
$var wire 1 9 rst $end
$var reg 32 I" out [31:0] $end
$upscope $end
$scope module _mem $end
$var wire 1 % clk $end
$var wire 1 1 is_write_mem $end
$var wire 32 J" new_bus_step_3 [31:0] $end
$var wire 32 K" new_coord_x_step_3 [31:0] $end
$var wire 32 L" new_coord_y_step_3 [31:0] $end
$var wire 32 M" out_bus_step_3 [31:0] $end
$var wire 1 9 rst $end
$scope begin assign_block[0] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 N" in [7:0] $end
$var wire 1 1 load $end
$var wire 1 9 rst $end
$var reg 8 O" out [7:0] $end
$upscope $end
$upscope $end
$scope begin assign_block[1] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 P" in [7:0] $end
$var wire 1 1 load $end
$var wire 1 9 rst $end
$var reg 8 Q" out [7:0] $end
$upscope $end
$upscope $end
$scope begin assign_block[2] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 R" in [7:0] $end
$var wire 1 1 load $end
$var wire 1 9 rst $end
$var reg 8 S" out [7:0] $end
$upscope $end
$upscope $end
$scope begin assign_block[3] $end
$scope module _reg $end
$var wire 1 % clk $end
$var wire 8 T" in [7:0] $end
$var wire 1 1 load $end
$var wire 1 9 rst $end
$var reg 8 U" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module _fsm $end
$var wire 32 V" bus_step_2 [31:0] $end
$var wire 1 % clk $end
$var wire 32 W" coord_x_step_2 [31:0] $end
$var wire 32 X" coord_y_step_2 [31:0] $end
$var wire 16 Y" instr_step_2 [15:0] $end
$var wire 1 9 rst $end
$var reg 1 Z" is_load_PC $end
$var reg 1 [" is_load_for_launch_1_2 $end
$var reg 1 \" is_load_for_launch_2_3 $end
$var reg 1 ]" is_move $end
$var reg 1 ^" is_touch $end
$var reg 1 _" is_write_mem $end
$var reg 1 `" is_write_reg $end
$var reg 2 a" next_state [1:0] $end
$var reg 2 b" state [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 b"
b1 a"
0`"
0_"
1^"
0]"
0\"
0["
1Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b11000000110000001100000011 1"
b0 0"
b0 /"
b0 ."
b10000001000000011 -"
b0 ,"
b0 +"
x*"
b11 )"
b11 ("
b0 '"
x&"
b11 %"
b11 $"
b0 #"
x""
b11 !"
b11 ~
b0 }
x|
b11 {
b11 z
b0 y
xx
b0 w
b0 v
1u
b0 t
xs
b0 r
b0 q
1p
b0 o
xn
b0 m
b0 l
1k
b0 j
xi
b0 h
b0 g
1f
b0 e
xd
b11 c
b11 b
1a
b0 `
x_
b10 ^
b10 ]
1\
b0 [
xZ
b1 Y
b1 X
1W
b0 V
xU
b0 T
b0 S
1R
b0 Q
b0 P
b0 O
b0 N
b0 M
b10000001000000011 L
b11000000110000001100000011 K
b0 J
b0 I
b0 H
b1 G
b1 F
b0 E
b1 D
b1 C
b0 B
b0 A
b0 @
z?
b0 >
b0 =
b0 <
b10000001000000011 ;
b11000000110000001100000011 :
19
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
02
01
10
0/
0.
0-
1,
b0 +
b0 *
b0 )
b0 (
b0 '
b10000001000000011 &
1%
b0 $
b11000000110000001100000011 #
1"
1!
$end
#50
xR
xW
x\
xa
xf
xk
xp
xu
0"
09
0!
0%
#100
b10 a"
1["
1-
0Z"
0,
b1 b"
0*"
0&"
0""
0|
b1 H
b10 C
b10 D
b10 G
b1 =
b1 E
b1 I
0x
0s
0n
0i
0d
0_
0Z
0U
1!
1%
#150
0!
0%
#200
b1000000010000000100000001 C"
b1000000010000000100000001 7
b1000000010000000100000001 ;"
b1000000010000000100000001 F"
b11000000110000001100000011 3
b11000000110000001100000011 9"
b11000000110000001100000011 H"
0^"
00
1]"
1/
b11000000110000001100000011 A"
b10000001000000011 B"
b10000001000000011 5
b10000001000000011 :"
b10000001000000011 D"
b11 a"
1\"
1.
0["
0-
b10000001000000011 ."
b10000001000000011 '
b10000001000000011 5"
b10000001000000011 >"
b10000001000000011 W"
b11000000110000001100000011 2"
b11000000110000001100000011 $
b11000000110000001100000011 3"
b11000000110000001100000011 <"
b11000000110000001100000011 V"
b10 b"
1!
1%
#250
0!
0%
#300
b0 a"
0\"
0.
1_"
11
1`"
12
b11 N"
b11 P"
b11 R"
b11 T"
b11 '"
b11 #"
b11 }
b11 y
b1 t
b1 o
b1 j
b1 e
b11 `
b10 [
b1 V
b11 b"
b11000000110000001100000011 I"
b11000000110000001100000011 4
b11000000110000001100000011 @
b11000000110000001100000011 N
b11000000110000001100000011 J"
b1000000010000000100000001 G"
b1000000010000000100000001 8
b1000000010000000100000001 B
b1000000010000000100000001 P
b1000000010000000100000001 L"
b10000001000000011 E"
b10000001000000011 6
b10000001000000011 A
b10000001000000011 O
b10000001000000011 K"
1!
1%
#350
0!
0%
#400
b1 a"
0_"
01
0`"
02
1Z"
1,
b11 O"
b11 Q"
b11 S"
b11 U"
b11000000110000001100000011 M"
b0 b"
b1 w
b1 r
b1 m
b1 h
b1000000010000000100000001 (
b1000000010000000100000001 <
b1000000010000000100000001 M
b1000000010000000100000001 /"
1!
1%
#450
0!
0%
#500
b10 a"
1["
1-
0Z"
0,
b1 b"
b10 H
b11 C
b11 D
b11 G
b10 =
b10 E
b10 I
1!
1%
#550
0!
0%
#600
b10000000100000001000000010 C"
b10000000100000001000000010 7
b10000000100000001000000010 ;"
b10000000100000001000000010 F"
b11 a"
1\"
1.
0["
0-
b1000000010000000100000001 0"
b1000000010000000100000001 )
b1000000010000000100000001 6"
b1000000010000000100000001 ?"
b1000000010000000100000001 X"
b10 b"
1!
1%
#650
0!
0%
#700
b0 a"
0\"
0.
1_"
11
1`"
12
b10 t
b10 o
b10 j
b10 e
b11 b"
b10000000100000001000000010 G"
b10000000100000001000000010 8
b10000000100000001000000010 B
b10000000100000001000000010 P
b10000000100000001000000010 L"
1!
1%
#750
0!
0%
#800
b1 a"
0_"
01
0`"
02
1Z"
1,
b0 b"
b10 w
b10 r
b10 m
b10 h
b10000000100000001000000010 (
b10000000100000001000000010 <
b10000000100000001000000010 M
b10000000100000001000000010 /"
1!
1%
#850
0!
0%
#900
b10 a"
1["
1-
0Z"
0,
b1 b"
b11 H
b100 C
b100 D
b100 G
b11 =
b11 E
b11 I
1!
1%
#950
0!
0%
#1000
b11000000110000001100000011 C"
b11000000110000001100000011 7
b11000000110000001100000011 ;"
b11000000110000001100000011 F"
b11 a"
1\"
1.
0["
0-
b10000000100000001000000010 0"
b10000000100000001000000010 )
b10000000100000001000000010 6"
b10000000100000001000000010 ?"
b10000000100000001000000010 X"
b10 b"
1!
1%
#1050
0!
0%
#1100
b0 a"
0\"
0.
1_"
11
1`"
12
b11 t
b11 o
b11 j
b11 e
b11 b"
b11000000110000001100000011 G"
b11000000110000001100000011 8
b11000000110000001100000011 B
b11000000110000001100000011 P
b11000000110000001100000011 L"
1!
1%
#1150
0!
0%
#1200
b1 a"
0_"
01
0`"
02
1Z"
1,
b0 b"
b11 w
b11 r
b11 m
b11 h
b11000000110000001100000011 (
b11000000110000001100000011 <
b11000000110000001100000011 M
b11000000110000001100000011 /"
1!
1%
#1250
0!
0%
#1300
b10 a"
1["
1-
0Z"
0,
b1 b"
b100 H
b0xxxxxxxx *
b0xxxxxxxx >
b0xxxxxxxx J
b0xxxxxxxx +"
b101 C
b101 D
b101 G
b100 =
b100 E
b100 I
1!
1%
#1350
0!
0%
#1400
b11000000110000001100000011 A"
1^"
10
0]"
0/
bx 7"
bx @"
b11000000110000001100000011 C"
b11000000110000001100000011 7
b11000000110000001100000011 ;"
b11000000110000001100000011 F"
b11 a"
1\"
1.
0["
0-
b0xxxxxxxx ,"
b0xxxxxxxx +
b0xxxxxxxx 8"
b0xxxxxxxx Y"
b11000000110000001100000011 0"
b11000000110000001100000011 )
b11000000110000001100000011 6"
b11000000110000001100000011 ?"
b11000000110000001100000011 X"
b10 b"
1!
1%
#1450
0!
0%
#1500
b0 a"
0\"
0.
1_"
11
1`"
12
b11 b"
1!
1%
#1550
0!
0%
#1600
b1 a"
0_"
01
0`"
02
1Z"
1,
b0 b"
1!
1%
#1650
0!
0%
#1700
b10 a"
1["
1-
0Z"
0,
b1 b"
b101 H
b110 C
b110 D
b110 G
b101 =
b101 E
b101 I
1!
1%
#1750
0!
0%
#1800
b11 a"
1\"
1.
0["
0-
b10 b"
1!
1%
#1850
0!
0%
#1900
b0 a"
0\"
0.
1_"
11
1`"
12
b11 b"
1!
1%
#1950
0!
0%
#2000
b1 a"
0_"
01
0`"
02
1Z"
1,
b0 b"
1!
1%
#2050
0!
0%
